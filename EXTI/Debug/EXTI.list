
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000860  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000990  08000998  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000990  08000990  00010998  2**0
                  CONTENTS
  4 .ARM          00000000  08000990  08000990  00010998  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000990  08000998  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000990  08000990  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000994  08000994  00010994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000998  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000998  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010998  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000aba  00000000  00000000  000109c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000446  00000000  00000000  0001147b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000220  00000000  00000000  000118c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00011ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001100  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c7a  00000000  00000000  00012da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000491d  00000000  00000000  00013a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e0  00000000  00000000  000183b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000978 	.word	0x08000978

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000978 	.word	0x08000978

08000170 <MEXTI_voidInit>:
#define CONCBIT(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)	CONCBIT_HELPER(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)
#define CONCBIT_HELPER(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) 0b##p##o##n##m##l##k##j##i##h##g##f##e##d##c##b##a


void MEXTI_voidInit(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	EXTI -> IMR = EXTI_STATE;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <MEXTI_voidInit+0x1c>)
 8000176:	f240 1201 	movw	r2, #257	; 0x101
 800017a:	601a      	str	r2, [r3, #0]
	EXTI -> EMR = EXTI_STATE;
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <MEXTI_voidInit+0x1c>)
 800017e:	f240 1201 	movw	r2, #257	; 0x101
 8000182:	605a      	str	r2, [r3, #4]
	
}
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	40010400 	.word	0x40010400

08000190 <MEXTI_voidSetSignalLatch>:
void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTISenseMode)
{	
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	460a      	mov	r2, r1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	4613      	mov	r3, r2
 800019e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8EXTISenseMode)
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	2b03      	cmp	r3, #3
 80001a4:	d004      	beq.n	80001b0 <MEXTI_voidSetSignalLatch+0x20>
 80001a6:	2b05      	cmp	r3, #5
 80001a8:	d02e      	beq.n	8000208 <MEXTI_voidSetSignalLatch+0x78>
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d016      	beq.n	80001dc <MEXTI_voidSetSignalLatch+0x4c>
 80001ae:	e040      	b.n	8000232 <MEXTI_voidSetSignalLatch+0xa2>
	{
		case	EXTI_RISING_EDGE	:	SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 80001b0:	4b27      	ldr	r3, [pc, #156]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001b2:	689b      	ldr	r3, [r3, #8]
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	2101      	movs	r1, #1
 80001b8:	fa01 f202 	lsl.w	r2, r1, r2
 80001bc:	4611      	mov	r1, r2
 80001be:	4a24      	ldr	r2, [pc, #144]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001c0:	430b      	orrs	r3, r1
 80001c2:	6093      	str	r3, [r2, #8]
										CLR_BIT(EXTI -> FTSR , Copy_u8EXTILine);	break;
 80001c4:	4b22      	ldr	r3, [pc, #136]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	2101      	movs	r1, #1
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	4611      	mov	r1, r2
 80001d4:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001d6:	400b      	ands	r3, r1
 80001d8:	60d3      	str	r3, [r2, #12]
 80001da:	e02a      	b.n	8000232 <MEXTI_voidSetSignalLatch+0xa2>

		case	EXTI_FALLING_EDGE	:	SET_BIT(EXTI -> FTSR , Copy_u8EXTILine);
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	79fa      	ldrb	r2, [r7, #7]
 80001e2:	2101      	movs	r1, #1
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	4611      	mov	r1, r2
 80001ea:	4a19      	ldr	r2, [pc, #100]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001ec:	430b      	orrs	r3, r1
 80001ee:	60d3      	str	r3, [r2, #12]
										CLR_BIT(EXTI -> RTSR , Copy_u8EXTILine);	break;
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	79fa      	ldrb	r2, [r7, #7]
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	43d2      	mvns	r2, r2
 80001fe:	4611      	mov	r1, r2
 8000200:	4a13      	ldr	r2, [pc, #76]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 8000202:	400b      	ands	r3, r1
 8000204:	6093      	str	r3, [r2, #8]
 8000206:	e014      	b.n	8000232 <MEXTI_voidSetSignalLatch+0xa2>

		case	EXTI_ON_CHANGE		:	SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	2101      	movs	r1, #1
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 8000218:	430b      	orrs	r3, r1
 800021a:	6093      	str	r3, [r2, #8]
										SET_BIT(EXTI -> FTSR , Copy_u8EXTILine);	break;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f202 	lsl.w	r2, r1, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a09      	ldr	r2, [pc, #36]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 800022c:	430b      	orrs	r3, r1
 800022e:	60d3      	str	r3, [r2, #12]
 8000230:	bf00      	nop
	}
	SET_BIT(EXTI -> IMR , Copy_u8EXTILine);
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	79fa      	ldrb	r2, [r7, #7]
 8000238:	2101      	movs	r1, #1
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	4611      	mov	r1, r2
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <MEXTI_voidSetSignalLatch+0xc0>)
 8000242:	430b      	orrs	r3, r1
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	40010400 	.word	0x40010400

08000254 <MEXTI5_9_voidSetCallBack>:
{
		EXTI4_CallBack = ptr ;
}

void MEXTI5_9_voidSetCallBack(void (*ptr) (void))
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
		EXTI5_9_CallBack = ptr ;
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <MEXTI5_9_voidSetCallBack+0x18>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6013      	str	r3, [r2, #0]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000030 	.word	0x20000030

08000270 <EXTI0_IRQHandler>:
		EXTI10_15_CallBack = ptr ;
}

/////////////////////////////////////////////////////////////////////////////////////
void	EXTI0_IRQHandler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	EXTI0_CallBack();
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <EXTI0_IRQHandler+0x1c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4798      	blx	r3

	SET_BIT(EXTI -> PR , 0);//clear pending bit
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <EXTI0_IRQHandler+0x20>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <EXTI0_IRQHandler+0x20>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6153      	str	r3, [r2, #20]
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	2000001c 	.word	0x2000001c
 8000290:	40010400 	.word	0x40010400

08000294 <EXTI1_IRQHandler>:

void	EXTI1_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <EXTI1_IRQHandler+0x1c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4798      	blx	r3

	SET_BIT(EXTI -> PR , 1);//clear pending bit
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <EXTI1_IRQHandler+0x20>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <EXTI1_IRQHandler+0x20>)
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	6153      	str	r3, [r2, #20]
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000020 	.word	0x20000020
 80002b4:	40010400 	.word	0x40010400

080002b8 <EXTI2_IRQHandler>:

void	EXTI2_IRQHandler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	EXTI2_CallBack();
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <EXTI2_IRQHandler+0x1c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3

	SET_BIT(EXTI -> PR , 2);//clear pending bit
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI2_IRQHandler+0x20>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI2_IRQHandler+0x20>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6153      	str	r3, [r2, #20]
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000024 	.word	0x20000024
 80002d8:	40010400 	.word	0x40010400

080002dc <EXTI3_IRQHandler>:

void	EXTI3_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	EXTI3_CallBack();
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI3_IRQHandler+0x1c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4798      	blx	r3

	SET_BIT(EXTI -> PR , 3);//clear pending bit
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <EXTI3_IRQHandler+0x20>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a04      	ldr	r2, [pc, #16]	; (80002fc <EXTI3_IRQHandler+0x20>)
 80002ec:	f043 0308 	orr.w	r3, r3, #8
 80002f0:	6153      	str	r3, [r2, #20]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40010400 	.word	0x40010400

08000300 <EXTI4_IRQHandler>:

void	EXTI4_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	EXTI4_CallBack();
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI4_IRQHandler+0x1c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4798      	blx	r3

	SET_BIT(EXTI -> PR , 4);//clear pending bit
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <EXTI4_IRQHandler+0x20>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <EXTI4_IRQHandler+0x20>)
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	6153      	str	r3, [r2, #20]
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2000002c 	.word	0x2000002c
 8000320:	40010400 	.word	0x40010400

08000324 <EXTI9_5_IRQHandler>:


void 	EXTI9_5_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	EXTI5_9_CallBack();
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <EXTI9_5_IRQHandler+0x20>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4798      	blx	r3
	INSERT_FIELD(EXTI -> PR ,0x000003E0,0b11111,5);
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <EXTI9_5_IRQHandler+0x24>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <EXTI9_5_IRQHandler+0x24>)
 8000338:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800033c:	6153      	str	r3, [r2, #20]
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000030 	.word	0x20000030
 8000348:	40010400 	.word	0x40010400

0800034c <EXTI15_10_IRQHandler>:

void 	EXTI15_10_IRQHandler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	EXTI10_15_CallBack();
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <EXTI15_10_IRQHandler+0x20>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4798      	blx	r3
	INSERT_FIELD(EXTI -> PR ,0x0000FC00,0b11111,10);
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <EXTI15_10_IRQHandler+0x24>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI15_10_IRQHandler+0x24>)
 8000360:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8000364:	6153      	str	r3, [r2, #20]
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000034 	.word	0x20000034
 8000370:	40010400 	.word	0x40010400

08000374 <MGPIO_voidSetPinDirection>:
#include "GPIO_config.h"



void MGPIO_voidSetPinDirection(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Mode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d03d      	beq.n	8000408 <MGPIO_voidSetPinDirection+0x94>
 800038c:	2b02      	cmp	r3, #2
 800038e:	d073      	beq.n	8000478 <MGPIO_voidSetPinDirection+0x104>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d000      	beq.n	8000396 <MGPIO_voidSetPinDirection+0x22>
		

	}//switch
	
	
}//fun
 8000394:	e0ad      	b.n	80004f2 <MGPIO_voidSetPinDirection+0x17e>
					if(copy_u8PIN <=7)
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	2b07      	cmp	r3, #7
 800039a:	d817      	bhi.n	80003cc <MGPIO_voidSetPinDirection+0x58>
						GPIOA_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 800039c:	4b57      	ldr	r3, [pc, #348]	; (80004fc <MGPIO_voidSetPinDirection+0x188>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	79ba      	ldrb	r2, [r7, #6]
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	210f      	movs	r1, #15
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a53      	ldr	r2, [pc, #332]	; (80004fc <MGPIO_voidSetPinDirection+0x188>)
 80003b0:	400b      	ands	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]
						GPIOA_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 80003b4:	4b51      	ldr	r3, [pc, #324]	; (80004fc <MGPIO_voidSetPinDirection+0x188>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	7979      	ldrb	r1, [r7, #5]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a4d      	ldr	r2, [pc, #308]	; (80004fc <MGPIO_voidSetPinDirection+0x188>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
					break;
 80003ca:	e08d      	b.n	80004e8 <MGPIO_voidSetPinDirection+0x174>
					else if(copy_u8PIN <=15)
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b0f      	cmp	r3, #15
 80003d0:	f200 808a 	bhi.w	80004e8 <MGPIO_voidSetPinDirection+0x174>
						GPIOA_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 80003d4:	4b4a      	ldr	r3, [pc, #296]	; (8000500 <MGPIO_voidSetPinDirection+0x18c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	79ba      	ldrb	r2, [r7, #6]
 80003da:	3a08      	subs	r2, #8
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	210f      	movs	r1, #15
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a45      	ldr	r2, [pc, #276]	; (8000500 <MGPIO_voidSetPinDirection+0x18c>)
 80003ea:	400b      	ands	r3, r1
 80003ec:	6013      	str	r3, [r2, #0]
						GPIOA_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 80003ee:	4b44      	ldr	r3, [pc, #272]	; (8000500 <MGPIO_voidSetPinDirection+0x18c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	7979      	ldrb	r1, [r7, #5]
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	3a08      	subs	r2, #8
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a3f      	ldr	r2, [pc, #252]	; (8000500 <MGPIO_voidSetPinDirection+0x18c>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6013      	str	r3, [r2, #0]
					break;
 8000406:	e06f      	b.n	80004e8 <MGPIO_voidSetPinDirection+0x174>
					if(copy_u8PIN <=7)
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	2b07      	cmp	r3, #7
 800040c:	d817      	bhi.n	800043e <MGPIO_voidSetPinDirection+0xca>
						GPIOB_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 800040e:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <MGPIO_voidSetPinDirection+0x190>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	210f      	movs	r1, #15
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	43d2      	mvns	r2, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a38      	ldr	r2, [pc, #224]	; (8000504 <MGPIO_voidSetPinDirection+0x190>)
 8000422:	400b      	ands	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
						GPIOB_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 8000426:	4b37      	ldr	r3, [pc, #220]	; (8000504 <MGPIO_voidSetPinDirection+0x190>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	7979      	ldrb	r1, [r7, #5]
 800042c:	79ba      	ldrb	r2, [r7, #6]
 800042e:	0092      	lsls	r2, r2, #2
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a33      	ldr	r2, [pc, #204]	; (8000504 <MGPIO_voidSetPinDirection+0x190>)
 8000438:	430b      	orrs	r3, r1
 800043a:	6013      	str	r3, [r2, #0]
					break;
 800043c:	e056      	b.n	80004ec <MGPIO_voidSetPinDirection+0x178>
					else if(copy_u8PIN <=15)
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	2b0f      	cmp	r3, #15
 8000442:	d853      	bhi.n	80004ec <MGPIO_voidSetPinDirection+0x178>
						GPIOB_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <MGPIO_voidSetPinDirection+0x194>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	79ba      	ldrb	r2, [r7, #6]
 800044a:	3a08      	subs	r2, #8
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	210f      	movs	r1, #15
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	43d2      	mvns	r2, r2
 8000456:	4611      	mov	r1, r2
 8000458:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <MGPIO_voidSetPinDirection+0x194>)
 800045a:	400b      	ands	r3, r1
 800045c:	6013      	str	r3, [r2, #0]
						GPIOB_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <MGPIO_voidSetPinDirection+0x194>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	7979      	ldrb	r1, [r7, #5]
 8000464:	79ba      	ldrb	r2, [r7, #6]
 8000466:	3a08      	subs	r2, #8
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	fa01 f202 	lsl.w	r2, r1, r2
 800046e:	4611      	mov	r1, r2
 8000470:	4a25      	ldr	r2, [pc, #148]	; (8000508 <MGPIO_voidSetPinDirection+0x194>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6013      	str	r3, [r2, #0]
					break;
 8000476:	e039      	b.n	80004ec <MGPIO_voidSetPinDirection+0x178>
					if(copy_u8PIN <=7)
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2b07      	cmp	r3, #7
 800047c:	d817      	bhi.n	80004ae <MGPIO_voidSetPinDirection+0x13a>
						GPIOC_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <MGPIO_voidSetPinDirection+0x198>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	79ba      	ldrb	r2, [r7, #6]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	210f      	movs	r1, #15
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	43d2      	mvns	r2, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a1e      	ldr	r2, [pc, #120]	; (800050c <MGPIO_voidSetPinDirection+0x198>)
 8000492:	400b      	ands	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
						GPIOC_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <MGPIO_voidSetPinDirection+0x198>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	7979      	ldrb	r1, [r7, #5]
 800049c:	79ba      	ldrb	r2, [r7, #6]
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a19      	ldr	r2, [pc, #100]	; (800050c <MGPIO_voidSetPinDirection+0x198>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6013      	str	r3, [r2, #0]
					break;
 80004ac:	e020      	b.n	80004f0 <MGPIO_voidSetPinDirection+0x17c>
					else if(copy_u8PIN <=15)
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d81d      	bhi.n	80004f0 <MGPIO_voidSetPinDirection+0x17c>
						GPIOC_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MGPIO_voidSetPinDirection+0x19c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	79ba      	ldrb	r2, [r7, #6]
 80004ba:	3a08      	subs	r2, #8
 80004bc:	0092      	lsls	r2, r2, #2
 80004be:	210f      	movs	r1, #15
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a11      	ldr	r2, [pc, #68]	; (8000510 <MGPIO_voidSetPinDirection+0x19c>)
 80004ca:	400b      	ands	r3, r1
 80004cc:	6013      	str	r3, [r2, #0]
						GPIOC_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MGPIO_voidSetPinDirection+0x19c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	7979      	ldrb	r1, [r7, #5]
 80004d4:	79ba      	ldrb	r2, [r7, #6]
 80004d6:	3a08      	subs	r2, #8
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	4611      	mov	r1, r2
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MGPIO_voidSetPinDirection+0x19c>)
 80004e2:	430b      	orrs	r3, r1
 80004e4:	6013      	str	r3, [r2, #0]
					break;
 80004e6:	e003      	b.n	80004f0 <MGPIO_voidSetPinDirection+0x17c>
					break;
 80004e8:	bf00      	nop
 80004ea:	e002      	b.n	80004f2 <MGPIO_voidSetPinDirection+0x17e>
					break;
 80004ec:	bf00      	nop
 80004ee:	e000      	b.n	80004f2 <MGPIO_voidSetPinDirection+0x17e>
					break;
 80004f0:	bf00      	nop
}//fun
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40010800 	.word	0x40010800
 8000500:	40010804 	.word	0x40010804
 8000504:	40010c00 	.word	0x40010c00
 8000508:	40010c04 	.word	0x40010c04
 800050c:	40011000 	.word	0x40011000
 8000510:	40011004 	.word	0x40011004

08000514 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	460b      	mov	r3, r1
 8000520:	71bb      	strb	r3, [r7, #6]
 8000522:	4613      	mov	r3, r2
 8000524:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d024      	beq.n	8000576 <MGPIO_voidSetPinValue+0x62>
 800052c:	2b02      	cmp	r3, #2
 800052e:	d042      	beq.n	80005b6 <MGPIO_voidSetPinValue+0xa2>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d000      	beq.n	8000536 <MGPIO_voidSetPinValue+0x22>
		

	}
	
	
}
 8000534:	e064      	b.n	8000600 <MGPIO_voidSetPinValue+0xec>
					if(copy_u8PIN <=15)
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d85c      	bhi.n	80005f6 <MGPIO_voidSetPinValue+0xe2>
						if(copy_u8Value==GPIO_HIGH)
 800053c:	797b      	ldrb	r3, [r7, #5]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d10a      	bne.n	8000558 <MGPIO_voidSetPinValue+0x44>
							SET_BIT(GPIOA_ODR,copy_u8PIN);
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <MGPIO_voidSetPinValue+0xf8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	79ba      	ldrb	r2, [r7, #6]
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a2e      	ldr	r2, [pc, #184]	; (800060c <MGPIO_voidSetPinValue+0xf8>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6013      	str	r3, [r2, #0]
					break;
 8000556:	e04e      	b.n	80005f6 <MGPIO_voidSetPinValue+0xe2>
						else if (copy_u8Value==GPIO_LOW)
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d14b      	bne.n	80005f6 <MGPIO_voidSetPinValue+0xe2>
							CLR_BIT(GPIOA_ODR,copy_u8PIN);
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MGPIO_voidSetPinValue+0xf8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	79ba      	ldrb	r2, [r7, #6]
 8000564:	2101      	movs	r1, #1
 8000566:	fa01 f202 	lsl.w	r2, r1, r2
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a27      	ldr	r2, [pc, #156]	; (800060c <MGPIO_voidSetPinValue+0xf8>)
 8000570:	400b      	ands	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
					break;
 8000574:	e03f      	b.n	80005f6 <MGPIO_voidSetPinValue+0xe2>
					if(copy_u8PIN <=15)
 8000576:	79bb      	ldrb	r3, [r7, #6]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d83e      	bhi.n	80005fa <MGPIO_voidSetPinValue+0xe6>
						if(copy_u8Value==GPIO_HIGH)
 800057c:	797b      	ldrb	r3, [r7, #5]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10a      	bne.n	8000598 <MGPIO_voidSetPinValue+0x84>
							SET_BIT(GPIOB_ODR,copy_u8PIN);
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MGPIO_voidSetPinValue+0xfc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	2101      	movs	r1, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a1f      	ldr	r2, [pc, #124]	; (8000610 <MGPIO_voidSetPinValue+0xfc>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
					break;
 8000596:	e030      	b.n	80005fa <MGPIO_voidSetPinValue+0xe6>
						else if (copy_u8Value==GPIO_LOW)
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d12d      	bne.n	80005fa <MGPIO_voidSetPinValue+0xe6>
							CLR_BIT(GPIOB_ODR,copy_u8PIN);
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MGPIO_voidSetPinValue+0xfc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a18      	ldr	r2, [pc, #96]	; (8000610 <MGPIO_voidSetPinValue+0xfc>)
 80005b0:	400b      	ands	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
					break;
 80005b4:	e021      	b.n	80005fa <MGPIO_voidSetPinValue+0xe6>
					if(copy_u8PIN <=15)
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d820      	bhi.n	80005fe <MGPIO_voidSetPinValue+0xea>
						if(copy_u8Value==GPIO_HIGH)
 80005bc:	797b      	ldrb	r3, [r7, #5]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d10a      	bne.n	80005d8 <MGPIO_voidSetPinValue+0xc4>
							SET_BIT(GPIOC_ODR,copy_u8PIN);
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MGPIO_voidSetPinValue+0x100>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	79ba      	ldrb	r2, [r7, #6]
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <MGPIO_voidSetPinValue+0x100>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]
					break;
 80005d6:	e012      	b.n	80005fe <MGPIO_voidSetPinValue+0xea>
						else if (copy_u8Value==GPIO_LOW)
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10f      	bne.n	80005fe <MGPIO_voidSetPinValue+0xea>
							CLR_BIT(GPIOC_ODR,copy_u8PIN);
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MGPIO_voidSetPinValue+0x100>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <MGPIO_voidSetPinValue+0x100>)
 80005f0:	400b      	ands	r3, r1
 80005f2:	6013      	str	r3, [r2, #0]
					break;
 80005f4:	e003      	b.n	80005fe <MGPIO_voidSetPinValue+0xea>
					break;
 80005f6:	bf00      	nop
 80005f8:	e002      	b.n	8000600 <MGPIO_voidSetPinValue+0xec>
					break;
 80005fa:	bf00      	nop
 80005fc:	e000      	b.n	8000600 <MGPIO_voidSetPinValue+0xec>
					break;
 80005fe:	bf00      	nop
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	4001080c 	.word	0x4001080c
 8000610:	40010c0c 	.word	0x40010c0c
 8000614:	4001100c 	.word	0x4001100c

08000618 <MGPIO_u8GetPinValue>:


u8   MGPIO_u8GetPinValue(u8 copy_u8PORT , u8 copy_u8PIN )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
	u8 local=0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
	switch(copy_u8PORT)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d010      	beq.n	8000654 <MGPIO_u8GetPinValue+0x3c>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d01b      	beq.n	800066e <MGPIO_u8GetPinValue+0x56>
 8000636:	2b00      	cmp	r3, #0
 8000638:	d12b      	bne.n	8000692 <MGPIO_u8GetPinValue+0x7a>
	{
		case GPIOA : 
					if(copy_u8PIN <=15)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d823      	bhi.n	8000688 <MGPIO_u8GetPinValue+0x70>
					{
						local= GET_BIT(GPIOA_IDR,copy_u8PIN);
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MGPIO_u8GetPinValue+0x88>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	fa22 f303 	lsr.w	r3, r2, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
					}
					else
					{
						//error
					}
					break;
 8000652:	e019      	b.n	8000688 <MGPIO_u8GetPinValue+0x70>
		case GPIOB :
					if(copy_u8PIN <=15)
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	2b0f      	cmp	r3, #15
 8000658:	d818      	bhi.n	800068c <MGPIO_u8GetPinValue+0x74>
					{
						local= GET_BIT(GPIOB_IDR,copy_u8PIN);
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MGPIO_u8GetPinValue+0x8c>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	fa22 f303 	lsr.w	r3, r2, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
					}
					else
					{
						//error
					}
					break;
 800066c:	e00e      	b.n	800068c <MGPIO_u8GetPinValue+0x74>
		case GPIOC :
					if(copy_u8PIN <=15)
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80d      	bhi.n	8000690 <MGPIO_u8GetPinValue+0x78>
					{
						local= GET_BIT(GPIOC_IDR,copy_u8PIN);
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MGPIO_u8GetPinValue+0x90>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	fa22 f303 	lsr.w	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
					}
					else
					{
						//error
					}
					break;
 8000686:	e003      	b.n	8000690 <MGPIO_u8GetPinValue+0x78>
					break;
 8000688:	bf00      	nop
 800068a:	e002      	b.n	8000692 <MGPIO_u8GetPinValue+0x7a>
					break;
 800068c:	bf00      	nop
 800068e:	e000      	b.n	8000692 <MGPIO_u8GetPinValue+0x7a>
					break;
 8000690:	bf00      	nop
		

	}
	return local;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40010808 	.word	0x40010808
 80006a4:	40010c08 	.word	0x40010c08
 80006a8:	40011008 	.word	0x40011008

080006ac <MNVIC_voidEnableInterrupt>:
#include "NVIC_config.h"



void MNVIC_voidEnableInterrupt(u8 Copy_u8IntNumber)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	
	if(Copy_u8IntNumber <32)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b1f      	cmp	r3, #31
 80006ba:	d805      	bhi.n	80006c8 <MNVIC_voidEnableInterrupt+0x1c>
	{
		
		NVIC_ISER0 = (1 <<Copy_u8IntNumber);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	409a      	lsls	r2, r3
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MNVIC_voidEnableInterrupt+0x38>)
 80006c4:	601a      	str	r2, [r3, #0]
		
		/* return error*/
		
	}
		
}// end of enable fun
 80006c6:	e008      	b.n	80006da <MNVIC_voidEnableInterrupt+0x2e>
	else if(Copy_u8IntNumber <59)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b3a      	cmp	r3, #58	; 0x3a
 80006cc:	d805      	bhi.n	80006da <MNVIC_voidEnableInterrupt+0x2e>
		NVIC_ISER1 = (1 <<(Copy_u8IntNumber-32));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	3b20      	subs	r3, #32
 80006d2:	2201      	movs	r2, #1
 80006d4:	409a      	lsls	r2, r3
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <MNVIC_voidEnableInterrupt+0x3c>)
 80006d8:	601a      	str	r2, [r3, #0]
}// end of enable fun
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000e104 	.word	0xe000e104

080006ec <RCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
			//INSERT_FIELD(RCC_CR,0x000000F8,RCC_HSI_TRIM+16,3);
		#else
			#error("You chose wrong Trim value for HSI");
		#endif

		SET_BIT(RCC_CR,0);/* Enable HSI */
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <RCC_voidInitSysClock+0x34>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <RCC_voidInitSysClock+0x34>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

		while(!GET_BIT(RCC_CR,1));//HSIRDY
 80006fc:	bf00      	nop
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <RCC_voidInitSysClock+0x34>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	085b      	lsrs	r3, r3, #1
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f8      	beq.n	80006fe <RCC_voidInitSysClock+0x12>
		
		INSERT_FIELD(RCC_CFGR,0x00000003,0,0);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <RCC_voidInitSysClock+0x38>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <RCC_voidInitSysClock+0x38>)
 8000712:	f023 0303 	bic.w	r3, r3, #3
 8000716:	6013      	str	r3, [r2, #0]
		#error("You chose wrong clock type")
	
	#endif
	
	
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40021004 	.word	0x40021004

08000728 <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	2b1f      	cmp	r3, #31
 800073c:	d828      	bhi.n	8000790 <RCC_voidEnableClock+0x68>
	{
		switch (Copy_u8BusId)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d00f      	beq.n	8000764 <RCC_voidEnableClock+0x3c>
 8000744:	2b02      	cmp	r3, #2
 8000746:	d018      	beq.n	800077a <RCC_voidEnableClock+0x52>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d000      	beq.n	800074e <RCC_voidEnableClock+0x26>
	{	
		//#error("enable clock for unspecified prephiral");
	}
	
	
}
 800074c:	e020      	b.n	8000790 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR ,Copy_u8PerId); break;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <RCC_voidEnableClock+0x74>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <RCC_voidEnableClock+0x74>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e015      	b.n	8000790 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR,Copy_u8PerId); break;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <RCC_voidEnableClock+0x78>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	79ba      	ldrb	r2, [r7, #6]
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <RCC_voidEnableClock+0x78>)
 8000774:	430b      	orrs	r3, r1
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	e00a      	b.n	8000790 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR,Copy_u8PerId); break;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <RCC_voidEnableClock+0x7c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <RCC_voidEnableClock+0x7c>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	bf00      	nop
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021014 	.word	0x40021014
 80007a0:	4002101c 	.word	0x4002101c
 80007a4:	40021018 	.word	0x40021018

080007a8 <MSTK_voidInit>:

void(*callback) (void);
u8 flag=0;

void MSTK_voidInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	#if 	(CLOCK_SOURCE == AHB)
		SET_BIT(STK_CTRL,2);
	#elif 	(CLOCK_SOURCE == AHB_8)
		CLR_BIT(STK_CTRL,2);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MSTK_voidInit+0x30>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <MSTK_voidInit+0x30>)
 80007b2:	f023 0304 	bic.w	r3, r3, #4
 80007b6:	6013      	str	r3, [r2, #0]
	#endif

	#if     (FLAG_INT == STK_ENABLE)
		SET_BIT(STK_CTRL,1);
	#elif   (FLAG_INT == STK_DISABLE)
		CLR_BIT(STK_CTRL,1);
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MSTK_voidInit+0x30>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <MSTK_voidInit+0x30>)
 80007be:	f023 0302 	bic.w	r3, r3, #2
 80007c2:	6013      	str	r3, [r2, #0]
	#endif

	#if     (SYS_TICK == STK_ENABLE)
		SET_BIT(STK_CTRL,0);
	#elif   (SYS_TICK == STK_DISABLE)
		CLR_BIT(STK_CTRL,0);
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <MSTK_voidInit+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <MSTK_voidInit+0x30>)
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
	#else
		#error ("wrong STATE for SYS_TICK ")
	#endif
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	e000e010 	.word	0xe000e010

080007dc <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait(u32 Copy_u32Ticks)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	STK_LOAD = Copy_u32Ticks;
 80007e4:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <MSTK_voidSetBusyWait+0x3c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]

	SET_BIT(STK_CTRL,0); //enable systick
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MSTK_voidSetBusyWait+0x40>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <MSTK_voidSetBusyWait+0x40>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]
	//CLR_BIT(STK_CTRL,16);
	flag=0;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MSTK_voidSetBusyWait+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	/*enable systick*/
	while(GET_BIT(STK_CTRL,16)==0);
 80007fc:	bf00      	nop
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <MSTK_voidSetBusyWait+0x40>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	0c1b      	lsrs	r3, r3, #16
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f8      	beq.n	80007fe <MSTK_voidSetBusyWait+0x22>

}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000e014 	.word	0xe000e014
 800081c:	e000e010 	.word	0xe000e010
 8000820:	20000038 	.word	0x20000038

08000824 <SysTick_Handler>:
{
	return STK_VAL;
}

void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	callback();
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <SysTick_Handler+0x24>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4798      	blx	r3
	if(flag==0) CLR_BIT(STK_CTRL,0); //Disable systick
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <SysTick_Handler+0x28>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <SysTick_Handler+0x1e>
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SysTick_Handler+0x2c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SysTick_Handler+0x2c>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000003c 	.word	0x2000003c
 800084c:	20000038 	.word	0x20000038
 8000850:	e000e010 	.word	0xe000e010

08000854 <ISR0>:
#include "STK_interface.h"
#include "EXTI_interface.h"


void ISR0 (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinValue(GPIOA, PIN3, !(MGPIO_u8GetPinValue(GPIOA, PIN3)));
 8000858:	2103      	movs	r1, #3
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fedc 	bl	8000618 <MGPIO_u8GetPinValue>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2103      	movs	r1, #3
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff fe4f 	bl	8000514 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f7ff ffb0 	bl	80007dc <MSTK_voidSetBusyWait>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <main>:
{
	MGPIO_voidSetPinValue(GPIOA, PIN4, !(MGPIO_u8GetPinValue(GPIOA, PIN4)));
	MSTK_voidSetBusyWait(100);
}
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//RCC
	RCC_voidInitSysClock();
 8000884:	f7ff ff32 	bl	80006ec <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_PORTA);
 8000888:	2102      	movs	r1, #2
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ff4c 	bl	8000728 <RCC_voidEnableClock>

	//GPIO

	//MGPIO_voidSetPinDirection(GPIOA, PIN0, INPUT_PUPD);
	//MGPIO_voidSetPinDirection(GPIOA, PIN1, INPUT_PUPD);
	MGPIO_voidSetPinDirection(GPIOA, PIN8, INPUT_PUPD);
 8000890:	2208      	movs	r2, #8
 8000892:	2108      	movs	r1, #8
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fd6d 	bl	8000374 <MGPIO_voidSetPinDirection>
	//MGPIO_voidSetPinDirection(GPIOA, PIN9, INPUT_PUPD);

	MGPIO_voidSetPinValue(GPIOA, PIN8, GPIO_HIGH);
 800089a:	2201      	movs	r2, #1
 800089c:	2108      	movs	r1, #8
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fe38 	bl	8000514 <MGPIO_voidSetPinValue>
	//MGPIO_voidSetPinValue(GPIOA, PIN1, GPIO_HIGH);

	MGPIO_voidSetPinDirection(GPIOA, PIN3, OUTPUT_SPEED_10MHZ_PP);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2103      	movs	r1, #3
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fd63 	bl	8000374 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA, PIN4, OUTPUT_SPEED_10MHZ_PP);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2104      	movs	r1, #4
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fd5e 	bl	8000374 <MGPIO_voidSetPinDirection>


	//EXTI0
	MEXTI5_9_voidSetCallBack(ISR0);
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <main+0x58>)
 80008ba:	f7ff fccb 	bl	8000254 <MEXTI5_9_voidSetCallBack>
	//MEXTI0_voidSetCallBack(ISR0);
	//MEXTI1_voidSetCallBack(ISR1);
	MEXTI_voidSetSignalLatch(MEXTI_LINE8, EXTI_FALLING_EDGE);
 80008be:	2101      	movs	r1, #1
 80008c0:	2008      	movs	r0, #8
 80008c2:	f7ff fc65 	bl	8000190 <MEXTI_voidSetSignalLatch>
	//MEXTI_voidSetSignalLatch(MEXTI_LINE1, EXTI_FALLING_EDGE);
	MEXTI_voidInit();
 80008c6:	f7ff fc53 	bl	8000170 <MEXTI_voidInit>

	//NVIC
	MNVIC_voidEnableInterrupt(NVIC_EXTI_LINE5_9);
 80008ca:	2017      	movs	r0, #23
 80008cc:	f7ff feee 	bl	80006ac <MNVIC_voidEnableInterrupt>
	//MNVIC_voidEnableInterrupt(NVIC_EXTI_LINE8);

	//STK
	MSTK_voidInit();
 80008d0:	f7ff ff6a 	bl	80007a8 <MSTK_voidInit>

	while(1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>
 80008d6:	bf00      	nop
 80008d8:	08000855 	.word	0x08000855

080008dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f000 f811 	bl	8000930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff ffb7 	bl	8000880 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   r0, =_estack
 8000914:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000920:	08000998 	.word	0x08000998
  ldr r2, =_sbss
 8000924:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000928:	20000040 	.word	0x20000040

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <__libc_init_array>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	2500      	movs	r5, #0
 8000934:	4e0c      	ldr	r6, [pc, #48]	; (8000968 <__libc_init_array+0x38>)
 8000936:	4c0d      	ldr	r4, [pc, #52]	; (800096c <__libc_init_array+0x3c>)
 8000938:	1ba4      	subs	r4, r4, r6
 800093a:	10a4      	asrs	r4, r4, #2
 800093c:	42a5      	cmp	r5, r4
 800093e:	d109      	bne.n	8000954 <__libc_init_array+0x24>
 8000940:	f000 f81a 	bl	8000978 <_init>
 8000944:	2500      	movs	r5, #0
 8000946:	4e0a      	ldr	r6, [pc, #40]	; (8000970 <__libc_init_array+0x40>)
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <__libc_init_array+0x44>)
 800094a:	1ba4      	subs	r4, r4, r6
 800094c:	10a4      	asrs	r4, r4, #2
 800094e:	42a5      	cmp	r5, r4
 8000950:	d105      	bne.n	800095e <__libc_init_array+0x2e>
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000958:	4798      	blx	r3
 800095a:	3501      	adds	r5, #1
 800095c:	e7ee      	b.n	800093c <__libc_init_array+0xc>
 800095e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000962:	4798      	blx	r3
 8000964:	3501      	adds	r5, #1
 8000966:	e7f2      	b.n	800094e <__libc_init_array+0x1e>
 8000968:	08000990 	.word	0x08000990
 800096c:	08000990 	.word	0x08000990
 8000970:	08000990 	.word	0x08000990
 8000974:	08000994 	.word	0x08000994

08000978 <_init>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	bf00      	nop
 800097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097e:	bc08      	pop	{r3}
 8000980:	469e      	mov	lr, r3
 8000982:	4770      	bx	lr

08000984 <_fini>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	bf00      	nop
 8000988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098a:	bc08      	pop	{r3}
 800098c:	469e      	mov	lr, r3
 800098e:	4770      	bx	lr
