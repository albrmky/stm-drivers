
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001df  00000000  00000000  000103c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000010a  00000000  00000000  000105a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  000106b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000be6  00000000  00000000  00010778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000021e  00000000  00000000  0001135e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000031de  00000000  00000000  0001157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001475a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000dc  00000000  00000000  000147d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000378 	.word	0x08000378

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000378 	.word	0x08000378

08000170 <RCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
		INSERT_FIELD(RCC_CFGR,0x00000003,0,0);

	#elif (RCC_CLOCK_TYPE ==RCC_PLL)

		#if((RCC_PLL_MUL_Val<=16) && (RCC_PLL_MUL_Val>=2) )
			INSERT_FIELD(RCC_CFGR,0x003C0000,RCC_PLL_MUL_Val-2,18);
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800017c:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 800017e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000182:	6013      	str	r3, [r2, #0]
			#error("You chose wrong PLL Multiplier");
		#endif


		#if (RCC_PLL_INPUT == RCC_PLL_IN_HSI_DIV_2)
			CLR_BIT(RCC_CFGR,16); // PLLSRC bit
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 800018a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800018e:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,16); // PLLSRC bit
		#else
			#error ("You chose wrong PLL Source");
		#endif

		SET_BIT(RCC_CR,24);/* Enable PLL ->PLLON BIT */
 8000190:	4b0d      	ldr	r3, [pc, #52]	; (80001c8 <RCC_voidInitSysClock+0x58>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <RCC_voidInitSysClock+0x58>)
 8000196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800019a:	6013      	str	r3, [r2, #0]
		INSERT_FIELD(RCC_CFGR,0x00000003,2,0);
 800019c:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	f023 0303 	bic.w	r3, r3, #3
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <RCC_voidInitSysClock+0x54>)
 80001a6:	3302      	adds	r3, #2
 80001a8:	6013      	str	r3, [r2, #0]

		while(!GET_BIT(RCC_CR,25));//PLLRDY
 80001aa:	bf00      	nop
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <RCC_voidInitSysClock+0x58>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	0e5b      	lsrs	r3, r3, #25
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d0f8      	beq.n	80001ac <RCC_voidInitSysClock+0x3c>
		#error("You chose wrong clock type")
	
	#endif
	
	
}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40021004 	.word	0x40021004
 80001c8:	40021000 	.word	0x40021000

080001cc <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	460a      	mov	r2, r1
 80001d6:	71fb      	strb	r3, [r7, #7]
 80001d8:	4613      	mov	r3, r2
 80001da:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	2b1f      	cmp	r3, #31
 80001e0:	d828      	bhi.n	8000234 <RCC_voidEnableClock+0x68>
	{
		switch (Copy_u8BusId)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d00f      	beq.n	8000208 <RCC_voidEnableClock+0x3c>
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d018      	beq.n	800021e <RCC_voidEnableClock+0x52>
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d000      	beq.n	80001f2 <RCC_voidEnableClock+0x26>
	{	
		//#error("enable clock for unspecified prephiral");
	}
	
	
}
 80001f0:	e020      	b.n	8000234 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR ,Copy_u8PerId); break;
 80001f2:	4b13      	ldr	r3, [pc, #76]	; (8000240 <RCC_voidEnableClock+0x74>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	79ba      	ldrb	r2, [r7, #6]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f202 	lsl.w	r2, r1, r2
 80001fe:	4611      	mov	r1, r2
 8000200:	4a0f      	ldr	r2, [pc, #60]	; (8000240 <RCC_voidEnableClock+0x74>)
 8000202:	430b      	orrs	r3, r1
 8000204:	6013      	str	r3, [r2, #0]
 8000206:	e015      	b.n	8000234 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR,Copy_u8PerId); break;
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <RCC_voidEnableClock+0x78>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	79ba      	ldrb	r2, [r7, #6]
 800020e:	2101      	movs	r1, #1
 8000210:	fa01 f202 	lsl.w	r2, r1, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <RCC_voidEnableClock+0x78>)
 8000218:	430b      	orrs	r3, r1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	e00a      	b.n	8000234 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR,Copy_u8PerId); break;
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <RCC_voidEnableClock+0x7c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	2101      	movs	r1, #1
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <RCC_voidEnableClock+0x7c>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6013      	str	r3, [r2, #0]
 8000232:	bf00      	nop
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40021014 	.word	0x40021014
 8000244:	4002101c 	.word	0x4002101c
 8000248:	40021018 	.word	0x40021018

0800024c <main>:

#define GPIOA_ODR	*((u32*)(0x4001080C ))
#define GPIOx_BSRR	*((u32*)(0x40010810 ))
#define GPIOx_BRR	*((u32*)(0x40010814 ))
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 8000252:	f7ff ff8d 	bl	8000170 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_PORTA);
 8000256:	2102      	movs	r1, #2
 8000258:	2002      	movs	r0, #2
 800025a:	f7ff ffb7 	bl	80001cc <RCC_voidEnableClock>
	GPIOA_CRL =0x00000041;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <main+0x84>)
 8000260:	2241      	movs	r2, #65	; 0x41
 8000262:	601a      	str	r2, [r3, #0]
	int delay=2000;
 8000264:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000268:	60fb      	str	r3, [r7, #12]
	unsigned int x=0;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
	unsigned int y=0;
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
	while(1)
	{

			GPIOx_BSRR=0x00000001;
 8000272:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <main+0x88>)
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]
			for(int x=0;x<delay;x++)
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
 800027c:	e00c      	b.n	8000298 <main+0x4c>
			{
				for(int x=0;x<delay;x++)
 800027e:	2300      	movs	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
 8000282:	e002      	b.n	800028a <main+0x3e>
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	3301      	adds	r3, #1
 8000288:	61bb      	str	r3, [r7, #24]
 800028a:	69ba      	ldr	r2, [r7, #24]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	429a      	cmp	r2, r3
 8000290:	dbf8      	blt.n	8000284 <main+0x38>
			for(int x=0;x<delay;x++)
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	3301      	adds	r3, #1
 8000296:	61fb      	str	r3, [r7, #28]
 8000298:	69fa      	ldr	r2, [r7, #28]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	429a      	cmp	r2, r3
 800029e:	dbee      	blt.n	800027e <main+0x32>
				{

				}
			}
			GPIOx_BRR =0x00000001;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0x8c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
			for(int x=0;x<delay;x++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	e00c      	b.n	80002c6 <main+0x7a>
			{
				for(int x=0;x<delay;x++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
 80002b0:	e002      	b.n	80002b8 <main+0x6c>
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	3301      	adds	r3, #1
 80002b6:	613b      	str	r3, [r7, #16]
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbf8      	blt.n	80002b2 <main+0x66>
			for(int x=0;x<delay;x++)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	3301      	adds	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	697a      	ldr	r2, [r7, #20]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	dbee      	blt.n	80002ac <main+0x60>
			GPIOx_BSRR=0x00000001;
 80002ce:	e7d0      	b.n	8000272 <main+0x26>
 80002d0:	40010800 	.word	0x40010800
 80002d4:	40010810 	.word	0x40010810
 80002d8:	40010814 	.word	0x40010814

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff9d 	bl	800024c <main>

08000312 <LoopForever>:

LoopForever:
    b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	2500      	movs	r5, #0
 8000334:	4e0c      	ldr	r6, [pc, #48]	; (8000368 <__libc_init_array+0x38>)
 8000336:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	42a5      	cmp	r5, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	f000 f81a 	bl	8000378 <_init>
 8000344:	2500      	movs	r5, #0
 8000346:	4e0a      	ldr	r6, [pc, #40]	; (8000370 <__libc_init_array+0x40>)
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <__libc_init_array+0x44>)
 800034a:	1ba4      	subs	r4, r4, r6
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	42a5      	cmp	r5, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000358:	4798      	blx	r3
 800035a:	3501      	adds	r5, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000362:	4798      	blx	r3
 8000364:	3501      	adds	r5, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
