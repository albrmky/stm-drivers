
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  000105cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004d6  00000000  00000000  000105f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000227  00000000  00000000  00010acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00010cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00010db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000dbd  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000599  00000000  00000000  00011bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000399d  00000000  00000000  00012196  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001dc  00000000  00000000  00015bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005ac 	.word	0x080005ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005ac 	.word	0x080005ac

08000170 <MGPIO_voidSetPinDirection>:
#include "GPIO_config.h"



void MGPIO_voidSetPinDirection(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Mode)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d03d      	beq.n	8000204 <MGPIO_voidSetPinDirection+0x94>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d073      	beq.n	8000274 <MGPIO_voidSetPinDirection+0x104>
 800018c:	2b00      	cmp	r3, #0
 800018e:	d000      	beq.n	8000192 <MGPIO_voidSetPinDirection+0x22>
		

	}//switch
	
	
}//fun
 8000190:	e0ad      	b.n	80002ee <MGPIO_voidSetPinDirection+0x17e>
					if(copy_u8PIN <=7)
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	2b07      	cmp	r3, #7
 8000196:	d817      	bhi.n	80001c8 <MGPIO_voidSetPinDirection+0x58>
						GPIOA_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 8000198:	4b57      	ldr	r3, [pc, #348]	; (80002f8 <MGPIO_voidSetPinDirection+0x188>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	79ba      	ldrb	r2, [r7, #6]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	210f      	movs	r1, #15
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	43d2      	mvns	r2, r2
 80001a8:	4611      	mov	r1, r2
 80001aa:	4a53      	ldr	r2, [pc, #332]	; (80002f8 <MGPIO_voidSetPinDirection+0x188>)
 80001ac:	400b      	ands	r3, r1
 80001ae:	6013      	str	r3, [r2, #0]
						GPIOA_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 80001b0:	4b51      	ldr	r3, [pc, #324]	; (80002f8 <MGPIO_voidSetPinDirection+0x188>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	7979      	ldrb	r1, [r7, #5]
 80001b6:	79ba      	ldrb	r2, [r7, #6]
 80001b8:	0092      	lsls	r2, r2, #2
 80001ba:	fa01 f202 	lsl.w	r2, r1, r2
 80001be:	4611      	mov	r1, r2
 80001c0:	4a4d      	ldr	r2, [pc, #308]	; (80002f8 <MGPIO_voidSetPinDirection+0x188>)
 80001c2:	430b      	orrs	r3, r1
 80001c4:	6013      	str	r3, [r2, #0]
					break;
 80001c6:	e08d      	b.n	80002e4 <MGPIO_voidSetPinDirection+0x174>
					else if(copy_u8PIN <=15)
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	2b0f      	cmp	r3, #15
 80001cc:	f200 808a 	bhi.w	80002e4 <MGPIO_voidSetPinDirection+0x174>
						GPIOA_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 80001d0:	4b4a      	ldr	r3, [pc, #296]	; (80002fc <MGPIO_voidSetPinDirection+0x18c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	3a08      	subs	r2, #8
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	210f      	movs	r1, #15
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	4611      	mov	r1, r2
 80001e4:	4a45      	ldr	r2, [pc, #276]	; (80002fc <MGPIO_voidSetPinDirection+0x18c>)
 80001e6:	400b      	ands	r3, r1
 80001e8:	6013      	str	r3, [r2, #0]
						GPIOA_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 80001ea:	4b44      	ldr	r3, [pc, #272]	; (80002fc <MGPIO_voidSetPinDirection+0x18c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	7979      	ldrb	r1, [r7, #5]
 80001f0:	79ba      	ldrb	r2, [r7, #6]
 80001f2:	3a08      	subs	r2, #8
 80001f4:	0092      	lsls	r2, r2, #2
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	4611      	mov	r1, r2
 80001fc:	4a3f      	ldr	r2, [pc, #252]	; (80002fc <MGPIO_voidSetPinDirection+0x18c>)
 80001fe:	430b      	orrs	r3, r1
 8000200:	6013      	str	r3, [r2, #0]
					break;
 8000202:	e06f      	b.n	80002e4 <MGPIO_voidSetPinDirection+0x174>
					if(copy_u8PIN <=7)
 8000204:	79bb      	ldrb	r3, [r7, #6]
 8000206:	2b07      	cmp	r3, #7
 8000208:	d817      	bhi.n	800023a <MGPIO_voidSetPinDirection+0xca>
						GPIOB_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 800020a:	4b3d      	ldr	r3, [pc, #244]	; (8000300 <MGPIO_voidSetPinDirection+0x190>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	79ba      	ldrb	r2, [r7, #6]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a38      	ldr	r2, [pc, #224]	; (8000300 <MGPIO_voidSetPinDirection+0x190>)
 800021e:	400b      	ands	r3, r1
 8000220:	6013      	str	r3, [r2, #0]
						GPIOB_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 8000222:	4b37      	ldr	r3, [pc, #220]	; (8000300 <MGPIO_voidSetPinDirection+0x190>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	7979      	ldrb	r1, [r7, #5]
 8000228:	79ba      	ldrb	r2, [r7, #6]
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	fa01 f202 	lsl.w	r2, r1, r2
 8000230:	4611      	mov	r1, r2
 8000232:	4a33      	ldr	r2, [pc, #204]	; (8000300 <MGPIO_voidSetPinDirection+0x190>)
 8000234:	430b      	orrs	r3, r1
 8000236:	6013      	str	r3, [r2, #0]
					break;
 8000238:	e056      	b.n	80002e8 <MGPIO_voidSetPinDirection+0x178>
					else if(copy_u8PIN <=15)
 800023a:	79bb      	ldrb	r3, [r7, #6]
 800023c:	2b0f      	cmp	r3, #15
 800023e:	d853      	bhi.n	80002e8 <MGPIO_voidSetPinDirection+0x178>
						GPIOB_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <MGPIO_voidSetPinDirection+0x194>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	79ba      	ldrb	r2, [r7, #6]
 8000246:	3a08      	subs	r2, #8
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	210f      	movs	r1, #15
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <MGPIO_voidSetPinDirection+0x194>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
						GPIOB_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 800025a:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MGPIO_voidSetPinDirection+0x194>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	3a08      	subs	r2, #8
 8000264:	0092      	lsls	r2, r2, #2
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a25      	ldr	r2, [pc, #148]	; (8000304 <MGPIO_voidSetPinDirection+0x194>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6013      	str	r3, [r2, #0]
					break;
 8000272:	e039      	b.n	80002e8 <MGPIO_voidSetPinDirection+0x178>
					if(copy_u8PIN <=7)
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	2b07      	cmp	r3, #7
 8000278:	d817      	bhi.n	80002aa <MGPIO_voidSetPinDirection+0x13a>
						GPIOC_CRL &= ~((0b1111)<<(4*copy_u8PIN));
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <MGPIO_voidSetPinDirection+0x198>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0092      	lsls	r2, r2, #2
 8000282:	210f      	movs	r1, #15
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a1e      	ldr	r2, [pc, #120]	; (8000308 <MGPIO_voidSetPinDirection+0x198>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
						GPIOC_CRL  |= 	copy_u8Mode<<(4*copy_u8PIN);
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MGPIO_voidSetPinDirection+0x198>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	7979      	ldrb	r1, [r7, #5]
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MGPIO_voidSetPinDirection+0x198>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
					break;
 80002a8:	e020      	b.n	80002ec <MGPIO_voidSetPinDirection+0x17c>
					else if(copy_u8PIN <=15)
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	2b0f      	cmp	r3, #15
 80002ae:	d81d      	bhi.n	80002ec <MGPIO_voidSetPinDirection+0x17c>
						GPIOC_CRH &= ~((0b1111)<<(4*(copy_u8PIN-8)));
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <MGPIO_voidSetPinDirection+0x19c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	3a08      	subs	r2, #8
 80002b8:	0092      	lsls	r2, r2, #2
 80002ba:	210f      	movs	r1, #15
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	43d2      	mvns	r2, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <MGPIO_voidSetPinDirection+0x19c>)
 80002c6:	400b      	ands	r3, r1
 80002c8:	6013      	str	r3, [r2, #0]
						GPIOC_CRH  |= copy_u8Mode<<(4*(copy_u8PIN-8));
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <MGPIO_voidSetPinDirection+0x19c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	7979      	ldrb	r1, [r7, #5]
 80002d0:	79ba      	ldrb	r2, [r7, #6]
 80002d2:	3a08      	subs	r2, #8
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a0b      	ldr	r2, [pc, #44]	; (800030c <MGPIO_voidSetPinDirection+0x19c>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6013      	str	r3, [r2, #0]
					break;
 80002e2:	e003      	b.n	80002ec <MGPIO_voidSetPinDirection+0x17c>
					break;
 80002e4:	bf00      	nop
 80002e6:	e002      	b.n	80002ee <MGPIO_voidSetPinDirection+0x17e>
					break;
 80002e8:	bf00      	nop
 80002ea:	e000      	b.n	80002ee <MGPIO_voidSetPinDirection+0x17e>
					break;
 80002ec:	bf00      	nop
}//fun
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40010800 	.word	0x40010800
 80002fc:	40010804 	.word	0x40010804
 8000300:	40010c00 	.word	0x40010c00
 8000304:	40010c04 	.word	0x40010c04
 8000308:	40011000 	.word	0x40011000
 800030c:	40011004 	.word	0x40011004

08000310 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 copy_u8PORT , u8 copy_u8PIN , u8 copy_u8Value)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	460b      	mov	r3, r1
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	4613      	mov	r3, r2
 8000320:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PORT)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d024      	beq.n	8000372 <MGPIO_voidSetPinValue+0x62>
 8000328:	2b02      	cmp	r3, #2
 800032a:	d042      	beq.n	80003b2 <MGPIO_voidSetPinValue+0xa2>
 800032c:	2b00      	cmp	r3, #0
 800032e:	d000      	beq.n	8000332 <MGPIO_voidSetPinValue+0x22>
		

	}
	
	
}
 8000330:	e064      	b.n	80003fc <MGPIO_voidSetPinValue+0xec>
					if(copy_u8PIN <=15)
 8000332:	79bb      	ldrb	r3, [r7, #6]
 8000334:	2b0f      	cmp	r3, #15
 8000336:	d85c      	bhi.n	80003f2 <MGPIO_voidSetPinValue+0xe2>
						if(copy_u8Value==GPIO_HIGH)
 8000338:	797b      	ldrb	r3, [r7, #5]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d10a      	bne.n	8000354 <MGPIO_voidSetPinValue+0x44>
							SET_BIT(GPIOA_ODR,copy_u8PIN);
 800033e:	4b32      	ldr	r3, [pc, #200]	; (8000408 <MGPIO_voidSetPinValue+0xf8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a2e      	ldr	r2, [pc, #184]	; (8000408 <MGPIO_voidSetPinValue+0xf8>)
 800034e:	430b      	orrs	r3, r1
 8000350:	6013      	str	r3, [r2, #0]
					break;
 8000352:	e04e      	b.n	80003f2 <MGPIO_voidSetPinValue+0xe2>
						else if (copy_u8Value==GPIO_LOW)
 8000354:	797b      	ldrb	r3, [r7, #5]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d14b      	bne.n	80003f2 <MGPIO_voidSetPinValue+0xe2>
							CLR_BIT(GPIOA_ODR,copy_u8PIN);
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <MGPIO_voidSetPinValue+0xf8>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	79ba      	ldrb	r2, [r7, #6]
 8000360:	2101      	movs	r1, #1
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	43d2      	mvns	r2, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a27      	ldr	r2, [pc, #156]	; (8000408 <MGPIO_voidSetPinValue+0xf8>)
 800036c:	400b      	ands	r3, r1
 800036e:	6013      	str	r3, [r2, #0]
					break;
 8000370:	e03f      	b.n	80003f2 <MGPIO_voidSetPinValue+0xe2>
					if(copy_u8PIN <=15)
 8000372:	79bb      	ldrb	r3, [r7, #6]
 8000374:	2b0f      	cmp	r3, #15
 8000376:	d83e      	bhi.n	80003f6 <MGPIO_voidSetPinValue+0xe6>
						if(copy_u8Value==GPIO_HIGH)
 8000378:	797b      	ldrb	r3, [r7, #5]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10a      	bne.n	8000394 <MGPIO_voidSetPinValue+0x84>
							SET_BIT(GPIOB_ODR,copy_u8PIN);
 800037e:	4b23      	ldr	r3, [pc, #140]	; (800040c <MGPIO_voidSetPinValue+0xfc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a1f      	ldr	r2, [pc, #124]	; (800040c <MGPIO_voidSetPinValue+0xfc>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
					break;
 8000392:	e030      	b.n	80003f6 <MGPIO_voidSetPinValue+0xe6>
						else if (copy_u8Value==GPIO_LOW)
 8000394:	797b      	ldrb	r3, [r7, #5]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d12d      	bne.n	80003f6 <MGPIO_voidSetPinValue+0xe6>
							CLR_BIT(GPIOB_ODR,copy_u8PIN);
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MGPIO_voidSetPinValue+0xfc>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	79ba      	ldrb	r2, [r7, #6]
 80003a0:	2101      	movs	r1, #1
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <MGPIO_voidSetPinValue+0xfc>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6013      	str	r3, [r2, #0]
					break;
 80003b0:	e021      	b.n	80003f6 <MGPIO_voidSetPinValue+0xe6>
					if(copy_u8PIN <=15)
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d820      	bhi.n	80003fa <MGPIO_voidSetPinValue+0xea>
						if(copy_u8Value==GPIO_HIGH)
 80003b8:	797b      	ldrb	r3, [r7, #5]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d10a      	bne.n	80003d4 <MGPIO_voidSetPinValue+0xc4>
							SET_BIT(GPIOC_ODR,copy_u8PIN);
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MGPIO_voidSetPinValue+0x100>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	79ba      	ldrb	r2, [r7, #6]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <MGPIO_voidSetPinValue+0x100>)
 80003ce:	430b      	orrs	r3, r1
 80003d0:	6013      	str	r3, [r2, #0]
					break;
 80003d2:	e012      	b.n	80003fa <MGPIO_voidSetPinValue+0xea>
						else if (copy_u8Value==GPIO_LOW)
 80003d4:	797b      	ldrb	r3, [r7, #5]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d10f      	bne.n	80003fa <MGPIO_voidSetPinValue+0xea>
							CLR_BIT(GPIOC_ODR,copy_u8PIN);
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <MGPIO_voidSetPinValue+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	43d2      	mvns	r2, r2
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <MGPIO_voidSetPinValue+0x100>)
 80003ec:	400b      	ands	r3, r1
 80003ee:	6013      	str	r3, [r2, #0]
					break;
 80003f0:	e003      	b.n	80003fa <MGPIO_voidSetPinValue+0xea>
					break;
 80003f2:	bf00      	nop
 80003f4:	e002      	b.n	80003fc <MGPIO_voidSetPinValue+0xec>
					break;
 80003f6:	bf00      	nop
 80003f8:	e000      	b.n	80003fc <MGPIO_voidSetPinValue+0xec>
					break;
 80003fa:	bf00      	nop
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	4001080c 	.word	0x4001080c
 800040c:	40010c0c 	.word	0x40010c0c
 8000410:	4001100c 	.word	0x4001100c

08000414 <RCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidInitSysClock(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
			//INSERT_FIELD(RCC_CR,0x000000F8,RCC_HSI_TRIM+16,3);
		#else
			#error("You chose wrong Trim value for HSI");
		#endif

		SET_BIT(RCC_CR,0);/* Enable HSI */
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <RCC_voidInitSysClock+0x34>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <RCC_voidInitSysClock+0x34>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]

		while(!GET_BIT(RCC_CR,1));//HSIRDY
 8000424:	bf00      	nop
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <RCC_voidInitSysClock+0x34>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	085b      	lsrs	r3, r3, #1
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f8      	beq.n	8000426 <RCC_voidInitSysClock+0x12>
		
		INSERT_FIELD(RCC_CFGR,0x00000003,0,0);
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <RCC_voidInitSysClock+0x38>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <RCC_voidInitSysClock+0x38>)
 800043a:	f023 0303 	bic.w	r3, r3, #3
 800043e:	6013      	str	r3, [r2, #0]
		#error("You chose wrong clock type")
	
	#endif
	
	
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40021004 	.word	0x40021004

08000450 <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	460a      	mov	r2, r1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	4613      	mov	r3, r2
 800045e:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b1f      	cmp	r3, #31
 8000464:	d828      	bhi.n	80004b8 <RCC_voidEnableClock+0x68>
	{
		switch (Copy_u8BusId)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d00f      	beq.n	800048c <RCC_voidEnableClock+0x3c>
 800046c:	2b02      	cmp	r3, #2
 800046e:	d018      	beq.n	80004a2 <RCC_voidEnableClock+0x52>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d000      	beq.n	8000476 <RCC_voidEnableClock+0x26>
	{	
		//#error("enable clock for unspecified prephiral");
	}
	
	
}
 8000474:	e020      	b.n	80004b8 <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR ,Copy_u8PerId); break;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <RCC_voidEnableClock+0x74>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	4611      	mov	r1, r2
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <RCC_voidEnableClock+0x74>)
 8000486:	430b      	orrs	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	e015      	b.n	80004b8 <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR,Copy_u8PerId); break;
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <RCC_voidEnableClock+0x78>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	2101      	movs	r1, #1
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <RCC_voidEnableClock+0x78>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6013      	str	r3, [r2, #0]
 80004a0:	e00a      	b.n	80004b8 <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR,Copy_u8PerId); break;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <RCC_voidEnableClock+0x7c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	79ba      	ldrb	r2, [r7, #6]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a06      	ldr	r2, [pc, #24]	; (80004cc <RCC_voidEnableClock+0x7c>)
 80004b2:	430b      	orrs	r3, r1
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	bf00      	nop
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021014 	.word	0x40021014
 80004c8:	4002101c 	.word	0x4002101c
 80004cc:	40021018 	.word	0x40021018

080004d0 <main>:
#include "GPIO_interface.h"

void delay(u16 value);

int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	RCC_voidInitSysClock();
 80004d6:	f7ff ff9d 	bl	8000414 <RCC_voidInitSysClock>

	RCC_voidEnableClock(RCC_PORTA);
 80004da:	2102      	movs	r1, #2
 80004dc:	2002      	movs	r0, #2
 80004de:	f7ff ffb7 	bl	8000450 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_PORTB);
 80004e2:	2103      	movs	r1, #3
 80004e4:	2002      	movs	r0, #2
 80004e6:	f7ff ffb3 	bl	8000450 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_PORTC);
 80004ea:	2104      	movs	r1, #4
 80004ec:	2002      	movs	r0, #2
 80004ee:	f7ff ffaf 	bl	8000450 <RCC_voidEnableClock>

	int delay_v=1000;
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	607b      	str	r3, [r7, #4]

	MGPIO_voidSetPinDirection(GPIOA, PIN1, OUTPUT_SPEED_10MHZ_PP);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe37 	bl	8000170 <MGPIO_voidSetPinDirection>
	while(1)
	{
		MGPIO_voidSetPinValue(GPIOA, PIN1,GPIO_HIGH);
 8000502:	2201      	movs	r2, #1
 8000504:	2101      	movs	r1, #1
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff02 	bl	8000310 <MGPIO_voidSetPinValue>
 800050c:	e7f9      	b.n	8000502 <main+0x32>
	...

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000514:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 f811 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff ffc5 	bl	80004d0 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000554:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 8000558:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800055c:	2000001c 	.word	0x2000001c

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2500      	movs	r5, #0
 8000568:	4e0c      	ldr	r6, [pc, #48]	; (800059c <__libc_init_array+0x38>)
 800056a:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056c:	1ba4      	subs	r4, r4, r6
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	42a5      	cmp	r5, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	f000 f81a 	bl	80005ac <_init>
 8000578:	2500      	movs	r5, #0
 800057a:	4e0a      	ldr	r6, [pc, #40]	; (80005a4 <__libc_init_array+0x40>)
 800057c:	4c0a      	ldr	r4, [pc, #40]	; (80005a8 <__libc_init_array+0x44>)
 800057e:	1ba4      	subs	r4, r4, r6
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	42a5      	cmp	r5, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800058c:	4798      	blx	r3
 800058e:	3501      	adds	r5, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000596:	4798      	blx	r3
 8000598:	3501      	adds	r5, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
