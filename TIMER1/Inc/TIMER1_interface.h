/*
 * TIMER1_interface.h
 *
 *  Created on: Sep 16, 2020
 *      Author: noureldeen albrmky
 */

#ifndef TIMER1_INTERFACE_H_
#define TIMER1_INTERFACE_H_








#define TIMER1_CCR1 1
#define TIMER1_CCR2 2
#define TIMER1_CCR3 3
#define TIMER1_CCR4 4


typedef enum {MTIMER1_DISABLE,MTIMER1_ENABLE }		TIMER1_STATE;
typedef enum {MTIMER1_ALL_REQUESTS,MTIMER1_OV_UNDER_ONLY}  TIMER1_UPDATE_REQUEST_SOURCE;
typedef enum {MTIMER1_UPCOUNT,MTIMER1_DOWNCOUNT}	TIMER1_DIR;

typedef enum {	MTIMER1_INTERRUPT_UPDATE	,
				MTIMER1_INTERRUPT_CC1		,
				MTIMER1_INTERRUPT_CC2		,
				MTIMER1_INTERRUPT_CC3		,
				MTIMER1_INTERRUPT_CC4		,
				MTIMER1_INTERRUPT_COM		,
				MTIMER1_INTERRUPT_TRIGGER	,
				MTIMER1_INTERRUPT_BREAK		,
				MTIMER1_DMA_UPDATE	,
				MTIMER1_DMA_CC1		,
				MTIMER1_DMA_CC2		,
				MTIMER1_DMA_CC3		,
				MTIMER1_DMA_CC4		,
				MTIMER1_DMA_COM		,
				MTIMER1_DMA_TRIGGER	,
}TIMER1_REQUEST_TYPE;

typedef enum {	MTIMER1_FLAG_UPDATE	,
				MTIMER1_FLAG_CC1		,
				MTIMER1_FLAG_CC2		,
				MTIMER1_FLAG_CC3		,
				MTIMER1_FLAG_CC4		,
				MTIMER1_FLAG_COM		,
				MTIMER1_FLAG_TRIGGER	,
				MTIMER1_FLAG_BREAK		,
				MTIMER1_FLAG_CC1O=9		,
				MTIMER1_FLAG_CC2O		,
				MTIMER1_FLAG_CC3O		,
				MTIMER1_FLAG_CC4O		,

}TIMER1_FLAGS;

typedef enum { 	MTIMER1_UPDATE_G	,
				MTIMER1_CC1_G	,
				MTIMER1_CC2_G	,
				MTIMER1_CC3_G	,
				MTIMER1_CC4_G	,
				MTIMER1_COM_G	,
				MTIMER1_TRIGGER_G,
				MTIMER1_BREAK_G	,
}TIMER1_EVENT_GENERATION;

typedef enum { 	MTIMER1_CC1_ENABLE		,
				MTIMER1_CC1_POLARITY	,
				MTIMER1_CC1N_ENABLE		,
				MTIMER1_CC1N_POLARITY	,

				MTIMER1_CC2_ENABLE		,
				MTIMER1_CC2_POLARITY	,
				MTIMER1_CC2N_ENABLE		,
				MTIMER1_CC2N_POLARITY	,

				MTIMER1_CC3_ENABLE		,
				MTIMER1_CC3_POLARITY	,
				MTIMER1_CC3N_ENABLE		,
				MTIMER1_CC3N_POLARITY	,

				MTIMER1_CC4_ENABLE		,
				MTIMER1_CC4_POLARITY	,

				MTIMER1_BREAK_ENABLE=12	,
				MTIMER1_BREAK_POLARITY

}TIMER1_PINS_CONFIG;

typedef enum {
	MTIMER1_CCx_CAPTURE_DISABLE=0	,//I/P   /E
	MTIMER1_CCx_CAPTURE_ENABLE		,
	MTIMER1_CCx_NON_INVERTED=0		,//I/P  /P
	MTIMER1_CCx_INVERTED			,
	MTIMER1_CCx_PIN_NOT_ACTIVE=0	,//O/P	//E
	MTIMER1_CCx_PIN_ACTIVE			,
	MTIMER1_CCx_ACTIVE_HIGH=0		,//O/P	//P
	MTIMER1_CCx_ACTIVE_LOW			,
	MTIMER1_CCx_BREAK_DISABLE=0		,
	MTIMER1_CCx_BREAK_ENABLE

}TIMER1_PINS_STATES;



void MTIMER1_voidInit(void);
void MTIMER1_voidSetCCPinsEnable_POLARITY(TIMER1_PINS_CONFIG index , TIMER1_PINS_STATES state);

void MTIMER1_voidWriteARR(u16 Copy_u16ARRData);
void MTIMER1_voidWriteCNT(u16 Copy_u16CNTData);
void MTIMER1_voidWritePSC(u16 Copy_u16PSCData);
void MTIMER1_voidWriteRCR(u16 Copy_u16RCRData);
void MTIMER1_voidWriteCCRx(u16 Copy_u16CCRxData , u8 Copy_u8Channel);

void MTIMER1_voidEnableMainOutput(TIMER1_STATE Copy_enumState);
void MTIMER1_voidEnableTimer(TIMER1_STATE Copy_enumState);
void MTIMER1_voidSetDirection(TIMER1_DIR Copy_enumDir);


void MTIMER1_voidINTEnable(TIMER1_REQUEST_TYPE Copy_enumType , TIMER1_STATE Copy_enumState);
void MTIMER1_voidClearFlag(TIMER1_FLAGS Copy_u8Flag);

void MTIMER1_voidGenerateEvent(TIMER1_EVENT_GENERATION Copy_u8Event);

#endif /* TIMER1_INTERFACE_H_ */
